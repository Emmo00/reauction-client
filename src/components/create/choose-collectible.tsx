"use client";

import { ArrowLeft, ChevronRight, Loader2, Wallet } from "lucide-react";
import { useRouter } from "next/navigation";
import type { Collection } from "@/components/create-flow";
import { useOwnedCollectibles } from "@/queries/casts";
import { useEffect, useState, useCallback, useRef } from "react";
import { useAccount, useConnect } from "wagmi";
import { CollectibleImage } from "@/components/collectible-image";
import { Button } from "@/components/ui/button";
import { CastResponse } from "@neynar/nodejs-sdk/build/api";

interface ChooseCollectibleProps {
  onSelect: (collection: Collection) => void;
}

export function ChooseCollectible({ onSelect }: ChooseCollectibleProps) {
  const perPage = 20; // Match backend default
  const [page, setPage] = useState<number>(1);
  const [allCollectibles, setAllCollectibles] = useState<CastResponse[]>([]);
  const [hasMorePages, setHasMorePages] = useState(true);
  const [isLoadingMore, setIsLoadingMore] = useState(false);
  const observerRef = useRef<IntersectionObserver | null>(null);
  const lastCollectibleRef = useRef<HTMLButtonElement | null>(null);

  const { address, isConnected } = useAccount();
  const { connect, connectors } = useConnect();
  const router = useRouter();

  const {
    data: collectiblesData,
    isLoading: collectiblesLoading,
    error: collectiblesError,
    refetch,
  } = useOwnedCollectibles({ address: address ?? null, page, perPage });

  // Handle data updates
  useEffect(() => {
    if (collectiblesData && "data" in collectiblesData) {
      const newCasts = collectiblesData.data.casts;

      if (page === 1) {
        // Reset for first page
        setAllCollectibles(newCasts);
      } else {
        // Append for subsequent pages
        setAllCollectibles((prev) => [...prev, ...newCasts]);
      }

      setHasMorePages(collectiblesData.data.pagination.hasNextPage);
      setIsLoadingMore(false);
    }
  }, [collectiblesData, page]);

  // Load more data when reaching the end
  const loadMore = useCallback(() => {
    if (!isLoadingMore && hasMorePages && !collectiblesLoading) {
      setIsLoadingMore(true);
      setPage((prev) => prev + 1);
    }
  }, [isLoadingMore, hasMorePages, collectiblesLoading]);

  // Infinite scroll intersection observer
  useEffect(() => {
    if (observerRef.current) {
      observerRef.current.disconnect();
    }

    observerRef.current = new IntersectionObserver(
      (entries) => {
        if (entries[0].isIntersecting) {
          loadMore();
        }
      },
      { threshold: 0.1 }
    );

    if (lastCollectibleRef.current) {
      observerRef.current.observe(lastCollectibleRef.current);
    }

    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, [loadMore, allCollectibles.length]);

  // Handle collectible selection
  const handleCollectibleSelect = (cast: CastResponse) => {
    // Convert cast to Collection format expected by the flow
    const collection: Collection = {
      id: cast.cast.hash,
      name: cast.cast.text?.slice(0, 50) || "Farcaster Cast",
      image: "", // Will be generated by CollectibleImage component
      itemsOwned: 1,
      cast: cast, // Add the full cast data
    };
    onSelect(collection);
  };

  // Show wallet connection if not connected
  if (!isConnected) {
    return (
      <div className="min-h-screen px-6 py-8">
        {/* Header */}
        <div className="mb-8 flex items-center gap-4">
          <button
            onClick={() => router.back()}
            className="flex h-10 w-10 items-center justify-center rounded-full bg-white/10 backdrop-blur-sm transition-colors hover:bg-white/20"
          >
            <ArrowLeft className="h-5 w-5 text-white" />
          </button>
          <h1 className="text-2xl font-bold text-white">Choose Collectible</h1>
        </div>

        {/* Wallet Connection Prompt */}
        <div className="flex flex-col items-center justify-center space-y-6 rounded-2xl border border-white/10 bg-white/5 p-12 backdrop-blur-md">
          <div className="flex h-16 w-16 items-center justify-center rounded-full bg-purple-500/20">
            <Wallet className="h-8 w-8 text-purple-400" />
          </div>
          <div className="text-center space-y-2">
            <h3 className="text-xl font-semibold text-white">Connect Your Wallet</h3>
            <p className="text-gray-400 text-sm max-w-md">
              Connect your wallet to view and select from your owned collectibles
            </p>
          </div>
          <Button
            onClick={() => connect({ connector: connectors[0] })}
            className="bg-purple-600 hover:bg-purple-700 text-white px-6 py-2 rounded-xl"
          >
            Connect Wallet
          </Button>
        </div>
      </div>
    );
  }

  // Show loading state
  if (collectiblesLoading && page === 1) {
    return (
      <div className="min-h-screen px-6 py-8">
        {/* Header */}
        <div className="mb-8 flex items-center gap-4">
          <button
            onClick={() => router.back()}
            className="flex h-10 w-10 items-center justify-center rounded-full bg-white/10 backdrop-blur-sm transition-colors hover:bg-white/20"
          >
            <ArrowLeft className="h-5 w-5 text-white" />
          </button>
          <h1 className="text-2xl font-bold text-white">Choose Collectible</h1>
        </div>

        {/* Loading State */}
        <div className="flex flex-col items-center justify-center space-y-6 rounded-2xl border border-white/10 bg-white/5 p-12 backdrop-blur-md">
          <div className="flex h-16 w-16 items-center justify-center rounded-full bg-purple-500/20">
            <Loader2 className="h-8 w-8 text-purple-400 animate-spin" />
          </div>
          <div className="text-center space-y-2">
            <h3 className="text-xl font-semibold text-white">Loading Your Collectibles</h3>
            <p className="text-gray-400 text-sm">
              Fetching your collectibles...
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Show error state
  if (collectiblesError) {
    return (
      <div className="min-h-screen px-6 py-8">
        {/* Header */}
        <div className="mb-8 flex items-center gap-4">
          <button
            onClick={() => router.back()}
            className="flex h-10 w-10 items-center justify-center rounded-full bg-white/10 backdrop-blur-sm transition-colors hover:bg-white/20"
          >
            <ArrowLeft className="h-5 w-5 text-white" />
          </button>
          <h1 className="text-2xl font-bold text-white">Choose Collectible</h1>
        </div>

        {/* Error State */}
        <div className="flex flex-col items-center justify-center space-y-6 rounded-2xl border border-red-500/20 bg-red-500/5 p-12 backdrop-blur-md">
          <div className="text-center space-y-2">
            <h3 className="text-xl font-semibold text-red-400">Error Loading Collectibles</h3>
            <p className="text-gray-400 text-sm">
              Failed to load your collectibles. Please try again.
            </p>
          </div>
          <Button
            onClick={() => refetch()}
            className="bg-red-600 hover:bg-red-700 text-white px-6 py-2 rounded-xl"
          >
            Try Again
          </Button>
        </div>
      </div>
    );
  }

  // Show empty state
  if (allCollectibles.length === 0 && !collectiblesLoading) {
    return (
      <div className="min-h-screen px-6 py-8">
        {/* Header */}
        <div className="mb-8 flex items-center gap-4">
          <button
            onClick={() => router.back()}
            className="flex h-10 w-10 items-center justify-center rounded-full bg-white/10 backdrop-blur-sm transition-colors hover:bg-white/20"
          >
            <ArrowLeft className="h-5 w-5 text-white" />
          </button>
          <h1 className="text-2xl font-bold text-white">Choose Collectible</h1>
        </div>

        {/* Empty State */}
        <div className="flex flex-col items-center justify-center space-y-6 rounded-2xl border border-white/10 bg-white/5 p-12 backdrop-blur-md">
          <div className="text-center space-y-2">
            <h3 className="text-xl font-semibold text-white">No Collectibles Found</h3>
            <p className="text-gray-400 text-sm max-w-md">
              You don't own any collectibles yet. Collect some casts first to create listings or
              auctions.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen px-6 py-8 pb-20">
      {/* Header */}
      <div className="mb-8 flex items-center gap-4">
        <button
          onClick={() => router.back()}
          className="flex h-10 w-10 items-center justify-center rounded-full bg-white/10 backdrop-blur-sm transition-colors hover:bg-white/20"
        >
          <ArrowLeft className="h-5 w-5 text-white" />
        </button>
        <div className="flex-1">
          <h1 className="text-2xl font-bold text-white">Choose Collectible</h1>
          <p className="text-sm text-gray-400 mt-1">
            Select a collectible to create a listing or auction
          </p>
        </div>
      </div>

      {/* Collectibles Grid */}
      <div className="grid grid-cols-1 gap-4">
        {allCollectibles.map((cast, index) => {
          const isLast = index === allCollectibles.length - 1;
          const truncatedText = cast.cast.text?.slice(0, 80) || "Farcaster Cast";

          return (
            <button
              key={`${cast.cast.hash}-${index}`}
              ref={isLast ? lastCollectibleRef : null}
              onClick={() => handleCollectibleSelect(cast)}
              className="group w-full overflow-hidden rounded-2xl border pr-4 border-white/10 bg-white/5 backdrop-blur-md transition-all hover:border-purple-500/50 hover:bg-white/10 hover:scale-[1.02]"
            >
              <div className="flex items-center gap-4">
                {/* Collectible Image */}
                <div className="h-32 w-32 overflow-hidden flex-shrink-0">
                  <CollectibleImage cast={cast} size={130} className="h-full w-full object-cover" />
                </div>

                {/* Content */}
                <div className="flex-1 text-left min-w-0">
                  <h3 className="font-semibold text-white text-sm group-hover:text-purple-300">
                    #{BigInt(cast.cast.hash).toString().substring(0, 6)} by{" "}
                    {cast.cast.author.display_name}
                  </h3>
                  <div className="flex items-center gap-2 mt-1">
                    <p className="text-[0.6rem] text-gray-400 truncate">{truncatedText}</p>
                  </div>
                </div>

                {/* Arrow */}
                <div className="text-gray-400 transition-transform group-hover:translate-x-1 group-hover:text-purple-400 flex-shrink-0">
                  <ChevronRight className="h-5 w-5" />
                </div>
              </div>
            </button>
          );
        })}
      </div>

      {/* Loading More Indicator */}
      {isLoadingMore && (
        <div className="flex items-center justify-center py-8">
          <div className="flex items-center gap-2 text-gray-400">
            <Loader2 className="h-4 w-4 animate-spin" />
            <span className="text-sm">Loading more collectibles...</span>
          </div>
        </div>
      )}

      {/* End of Results */}
      {!hasMorePages && page !== 1 && allCollectibles.length > 0 && (
        <div className="flex items-center justify-center py-8">
          <p className="text-sm text-gray-500">-- end --</p>
        </div>
      )}
    </div>
  );
}
